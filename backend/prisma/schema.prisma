generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ENUMS
enum ROLE {
  SUPER_ADMIN @map("super-admin")
  ADMIN       @map("admin")
  USER        @map("user")
}

enum PERMISSION {
  SUPER_ADMIN_GET    @map("super-admin.get")
  SUPER_ADMIN_PUT    @map("super-admin.put")
  SUPER_ADMIN_DELETE @map("super-admin.delete")
  SUPER_ADMIN_POST   @map("super-admin.post")
  ADMIN_GET          @map("admin.get")
  ADMIN_PUT          @map("admin.put")
  ADMIN_DELETE       @map("admin.delete")
  ADMIN_POST         @map("admin.post")
  USER_GET           @map("user.get")
  USER_PUT           @map("user.put")
  USER_DELETE        @map("user.delete")
  USER_POST          @map("user.post")
  REPORT_GET         @map("report.get")
}

// USERS
model User {
  id             Int       @id @default(autoincrement())
  name           String
  email          String
  pic            String?   @default("http://localhost:8000/static/profile/default.png")
  password       String
  createdAt      DateTime  @default(now())
  create         User?     @relation("user", fields: [createdBy], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdBy      Int?      @unique
  update         User?     @relation("update_user", fields: [updatedBy], references: [id], onDelete: Cascade, onUpdate: Cascade)
  updatedBy      Int?      @unique
  updatedAt      DateTime? @updatedAt
  createUser     User?     @relation("user")
  updatedUser    User?     @relation("update_user")
  order          Order[]   @relation("order")
  userProd       Review[]  @relation("Review")
  role           Role?     @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roleId         Int?
  ProductCreator Product[] @relation("product_creator")
  ProductUpdator Product[] @relation("product_updator")
}

model Role {
  id                Int                 @id @default(autoincrement())
  roles             ROLE                @default(USER)
  role_rank         Int                 @default(3)
  Roles_Permissions Roles_Permissions[]
  user              User[]
}

model Permission {
  id                Int                 @id @default(autoincrement())
  permissions       PERMISSION
  Roles_Permissions Roles_Permissions[]
}

model Roles_Permissions {
  id           Int        @id @default(autoincrement())
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roleId       Int
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  permissionId Int
}

model Product {
  id             Int             @id @default(autoincrement())
  product_name   String
  description    String?
  pic            String?         @default("http://localhost:8000/static/products/default-product-image.png")
  cost_price     Decimal         @db.Decimal(10, 2)
  stock          Int             @default(0)
  selling_price  Decimal         @db.Decimal(10, 2)
  category       Category?       @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  category_id    Int // Foreign key for Category
  avg_rating     Decimal?        @db.Decimal(10, 2)
  total_review   Decimal?        @db.Decimal(10, 2)
  Review         Review[]        @relation("Review")
  Order_Product  Order_Product[] @relation("order_product")
  productCreator User?           @relation("product_creator", fields: [createdBy], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdBy      Int
  productUpdator User?           @relation("product_updator", fields: [updatedBy], references: [id], onDelete: Cascade, onUpdate: Cascade)
  updatedBy      Int?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model Category {
  id            Int             @id @default(autoincrement())
  category_name String
  Product       Product[]
  Order_Product Order_Product[]
}

model Order {
  id            String          @id @default(uuid())
  user          User            @relation("order", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id       Int
  total_amount  Decimal         @db.Decimal(10, 2)
  location      String
  createdAt     DateTime        @default(now())
  Order_Product Order_Product[] @relation("order_product")
}

model Review {
  id         Int      @id @default(autoincrement())
  user       User     @relation("Review", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id    Int
  product    Product? @relation("Review", fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product_id Int
  rating     Int?
  review     String?
  createdAt  DateTime @default(now())
}

model Order_Product {
  id          Int      @id @default(autoincrement())
  order       Order    @relation("order_product", fields: [order_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  order_id    String
  product     Product? @relation("order_product", fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product_id  Int
  quantity    Int      @default(0)
  net_amount  Decimal  @db.Decimal(10, 2)
  category    Category @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  category_id Int
}
